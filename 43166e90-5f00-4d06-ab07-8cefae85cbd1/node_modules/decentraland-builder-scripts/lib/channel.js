"use strict";
/// <reference path="./types.d.ts" />
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var REQUEST_VALUE = '__request_value__';
var REPLY_VALUE = '__reply_value__';
var POLL_INTERVAL = 5000;
function createChannel(id, host, bus) {
    var handlers = {};
    var requests = {};
    var responses = {};
    bus.on(host.name, function (action) {
        var handler = handlers[action.actionId];
        if (handler) {
            handler(action);
        }
        // clear all pending requests for this entity
        requests = {};
    });
    bus.on(REQUEST_VALUE, function (message) {
        if (message.sender !== id && message.entityName === host.name) {
            var key = message.key;
            var response = responses[key];
            if (response) {
                var value = response();
                var reply = {
                    entityName: host.name,
                    key: key,
                    sender: id,
                    value: value
                };
                bus.emit(REPLY_VALUE, reply);
            }
            // clear pending request for this key
            delete requests[key];
        }
    });
    bus.on(REPLY_VALUE, function (message) {
        if (message.sender !== id && message.entityName === host.name) {
            var key = message.key, value = message.value;
            var request = requests[key];
            if (request) {
                request(value);
            }
            // clear pending request for this key
            delete requests[key];
        }
    });
    return {
        id: id,
        bus: bus,
        sendActions: function (actions) {
            var e_1, _a;
            if (actions === void 0) { actions = []; }
            try {
                for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                    var base = actions_1_1.value;
                    var action = __assign({}, base, { sender: id });
                    bus.emit(action.entityName, action);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        },
        handleAction: function (actionId, handler) {
            handlers[actionId] = handler;
        },
        request: function (key, callback) {
            requests[key] = callback;
            var request = { entityName: host.name, key: key, sender: id };
            var interval = setInterval(function () {
                if (key in requests) {
                    bus.emit(REQUEST_VALUE, request);
                }
                else {
                    clearInterval(interval);
                }
            }, POLL_INTERVAL);
        },
        reply: function (key, callback) {
            responses[key] = callback;
        }
    };
}
exports.createChannel = createChannel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxxQ0FBcUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZXJDLElBQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFBO0FBQ3pDLElBQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFBO0FBQ3JDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQTtBQUsxQixTQUFnQixhQUFhLENBQUMsRUFBVSxFQUFFLElBQVMsRUFBRSxHQUFRO0lBQzNELElBQU0sUUFBUSxHQUEwQyxFQUFFLENBQUE7SUFDMUQsSUFBSSxRQUFRLEdBQXlDLEVBQUUsQ0FBQTtJQUN2RCxJQUFNLFNBQVMsR0FBOEIsRUFBRSxDQUFBO0lBRS9DLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFDLE1BQW1CO1FBQ3BDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDekMsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDaEI7UUFDRCw2Q0FBNkM7UUFDN0MsUUFBUSxHQUFHLEVBQUUsQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBRUYsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBQyxPQUF1QjtRQUM1QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyRCxJQUFBLGlCQUFHLENBQVk7WUFDdkIsSUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQU0sS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFBO2dCQUN4QixJQUFNLEtBQUssR0FBaUI7b0JBQzFCLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDckIsR0FBRyxLQUFBO29CQUNILE1BQU0sRUFBRSxFQUFFO29CQUNWLEtBQUssT0FBQTtpQkFDTixDQUFBO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFBO2FBQzdCO1lBQ0QscUNBQXFDO1lBQ3JDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixHQUFHLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFDLE9BQXFCO1FBQ3hDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JELElBQUEsaUJBQUcsRUFBRSxxQkFBSyxDQUFZO1lBQzlCLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM3QixJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDZjtZQUNELHFDQUFxQztZQUNyQyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUNyQjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTztRQUNMLEVBQUUsSUFBQTtRQUNGLEdBQUcsS0FBQTtRQUNILFdBQVcsRUFBWCxVQUFZLE9BQXFCOztZQUFyQix3QkFBQSxFQUFBLFlBQXFCOztnQkFDL0IsS0FBbUIsSUFBQSxZQUFBLFNBQUEsT0FBTyxDQUFBLGdDQUFBLHFEQUFFO29CQUF2QixJQUFNLElBQUksb0JBQUE7b0JBQ2IsSUFBTSxNQUFNLGdCQUFxQixJQUFJLElBQUUsTUFBTSxFQUFFLEVBQUUsR0FBRSxDQUFBO29CQUNuRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7aUJBQ3BDOzs7Ozs7Ozs7UUFDSCxDQUFDO1FBQ0QsWUFBWSxFQUFaLFVBQWdCLFFBQWdCLEVBQUUsT0FBNEI7WUFDNUQsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sQ0FBQTtRQUM5QixDQUFDO1FBQ0QsT0FBTyxFQUFQLFVBQVcsR0FBVyxFQUFFLFFBQTRCO1lBQ2xELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUE7WUFDeEIsSUFBTSxPQUFPLEdBQW1CLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFBLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFBO1lBQzFFLElBQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQztnQkFDM0IsSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFO29CQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQTtpQkFDakM7cUJBQU07b0JBQ0wsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO2lCQUN4QjtZQUNILENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQTtRQUNuQixDQUFDO1FBQ0QsS0FBSyxFQUFMLFVBQVMsR0FBVyxFQUFFLFFBQWlCO1lBQ3JDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUE7UUFDM0IsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBeEVELHNDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGVzLmQudHNcIiAvPlxuXG50eXBlIFJlcXVlc3RNZXNzYWdlID0ge1xuICBlbnRpdHlOYW1lOiBzdHJpbmdcbiAga2V5OiBzdHJpbmdcbiAgc2VuZGVyOiBzdHJpbmdcbn1cblxudHlwZSBSZXBseU1lc3NhZ2UgPSB7XG4gIGVudGl0eU5hbWU6IHN0cmluZ1xuICBrZXk6IHN0cmluZ1xuICBzZW5kZXI6IHN0cmluZ1xuICB2YWx1ZTogc3RyaW5nXG59XG5cbmNvbnN0IFJFUVVFU1RfVkFMVUUgPSAnX19yZXF1ZXN0X3ZhbHVlX18nXG5jb25zdCBSRVBMWV9WQUxVRSA9ICdfX3JlcGx5X3ZhbHVlX18nXG5jb25zdCBQT0xMX0lOVEVSVkFMID0gNTAwMFxuXG5kZWNsYXJlIHZhciBzZXRJbnRlcnZhbDogYW55XG5kZWNsYXJlIHZhciBjbGVhckludGVydmFsOiBhbnlcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoYW5uZWwoaWQ6IHN0cmluZywgaG9zdDogYW55LCBidXM6IEJ1cyk6IElDaGFubmVsIHtcbiAgY29uc3QgaGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsICh2YWx1ZXM6IGFueSkgPT4gdm9pZD4gPSB7fVxuICBsZXQgcmVxdWVzdHM6IFJlY29yZDxzdHJpbmcsICh2YWx1ZTogYW55KSA9PiB2b2lkPiA9IHt9XG4gIGNvbnN0IHJlc3BvbnNlczogUmVjb3JkPHN0cmluZywgKCkgPT4gYW55PiA9IHt9XG5cbiAgYnVzLm9uKGhvc3QubmFtZSwgKGFjdGlvbjogQWN0aW9uPGFueT4pID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbYWN0aW9uLmFjdGlvbklkXVxuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKGFjdGlvbilcbiAgICB9XG4gICAgLy8gY2xlYXIgYWxsIHBlbmRpbmcgcmVxdWVzdHMgZm9yIHRoaXMgZW50aXR5XG4gICAgcmVxdWVzdHMgPSB7fVxuICB9KVxuXG4gIGJ1cy5vbihSRVFVRVNUX1ZBTFVFLCAobWVzc2FnZTogUmVxdWVzdE1lc3NhZ2UpID0+IHtcbiAgICBpZiAobWVzc2FnZS5zZW5kZXIgIT09IGlkICYmIG1lc3NhZ2UuZW50aXR5TmFtZSA9PT0gaG9zdC5uYW1lKSB7XG4gICAgICBjb25zdCB7IGtleSB9ID0gbWVzc2FnZVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXNwb25zZXNba2V5XVxuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmVzcG9uc2UoKVxuICAgICAgICBjb25zdCByZXBseTogUmVwbHlNZXNzYWdlID0ge1xuICAgICAgICAgIGVudGl0eU5hbWU6IGhvc3QubmFtZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgc2VuZGVyOiBpZCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9XG4gICAgICAgIGJ1cy5lbWl0KFJFUExZX1ZBTFVFLCByZXBseSlcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFyIHBlbmRpbmcgcmVxdWVzdCBmb3IgdGhpcyBrZXlcbiAgICAgIGRlbGV0ZSByZXF1ZXN0c1trZXldXG4gICAgfVxuICB9KVxuXG4gIGJ1cy5vbihSRVBMWV9WQUxVRSwgKG1lc3NhZ2U6IFJlcGx5TWVzc2FnZSkgPT4ge1xuICAgIGlmIChtZXNzYWdlLnNlbmRlciAhPT0gaWQgJiYgbWVzc2FnZS5lbnRpdHlOYW1lID09PSBob3N0Lm5hbWUpIHtcbiAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gbWVzc2FnZVxuICAgICAgY29uc3QgcmVxdWVzdCA9IHJlcXVlc3RzW2tleV1cbiAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QodmFsdWUpXG4gICAgICB9XG4gICAgICAvLyBjbGVhciBwZW5kaW5nIHJlcXVlc3QgZm9yIHRoaXMga2V5XG4gICAgICBkZWxldGUgcmVxdWVzdHNba2V5XVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIGJ1cyxcbiAgICBzZW5kQWN0aW9ucyhhY3Rpb25zOiBBY3Rpb25zID0gW10pIHtcbiAgICAgIGZvciAoY29uc3QgYmFzZSBvZiBhY3Rpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbjogQWN0aW9uPGFueT4gPSB7IC4uLmJhc2UsIHNlbmRlcjogaWQgfVxuICAgICAgICBidXMuZW1pdChhY3Rpb24uZW50aXR5TmFtZSwgYWN0aW9uKVxuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlQWN0aW9uPFQ+KGFjdGlvbklkOiBzdHJpbmcsIGhhbmRsZXI6ICh2YWx1ZXM6IFQpID0+IHZvaWQpIHtcbiAgICAgIGhhbmRsZXJzW2FjdGlvbklkXSA9IGhhbmRsZXJcbiAgICB9LFxuICAgIHJlcXVlc3Q8VD4oa2V5OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IFQpID0+IHZvaWQpIHtcbiAgICAgIHJlcXVlc3RzW2tleV0gPSBjYWxsYmFja1xuICAgICAgY29uc3QgcmVxdWVzdDogUmVxdWVzdE1lc3NhZ2UgPSB7IGVudGl0eU5hbWU6IGhvc3QubmFtZSwga2V5LCBzZW5kZXI6IGlkIH1cbiAgICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIHJlcXVlc3RzKSB7XG4gICAgICAgICAgYnVzLmVtaXQoUkVRVUVTVF9WQUxVRSwgcmVxdWVzdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKVxuICAgICAgICB9XG4gICAgICB9LCBQT0xMX0lOVEVSVkFMKVxuICAgIH0sXG4gICAgcmVwbHk8VD4oa2V5OiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBUKSB7XG4gICAgICByZXNwb25zZXNba2V5XSA9IGNhbGxiYWNrXG4gICAgfVxuICB9XG59XG4iXX0=